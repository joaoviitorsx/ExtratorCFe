import os
import pandas as pd
from typing import List
from src.models.cfeModel import CFeModel

class ExportService:
    def __init__(self):
        pass

    def gerarPlanilha(self, cfes: List[CFeModel], caminho_saida: str) -> str:
        headers = [
            # ðŸ“Œ Bloco geral (infCFe / ide)
            "Chave", "VersÃ£o CF-e", "VersÃ£o Dados Ent", "VersÃ£o SAT",
            "CÃ³digo UF", "CÃ³digo NumÃ©rico", "Modelo", "NÂº SÃ©rie SAT", "NÂº CF-e",
            "Data EmissÃ£o", "Hora EmissÃ£o", "DÃ­gito Verificador", "Tipo Ambiente",
            "CNPJ Software House", "Assinatura AC", "Assinatura QR Code", "NÃºmero do Caixa",

            # ðŸ“Œ Emitente
            "CNPJ Emitente", "Nome Social", "Nome Fantasia",
            "Logradouro Emitente", "NÃºmero Emitente", "Complemento Emitente",
            "Bairro Emitente", "MunicÃ­pio Emitente", "CEP Emitente",
            "IE Emitente", "Regime TributÃ¡rio", "Indicador ISSQN",

            # ðŸ“Œ DestinatÃ¡rio
            "CPF/CNPJ DestinatÃ¡rio", "Nome DestinatÃ¡rio",

            # ðŸ“Œ Produtos (cada linha vai repetir os dados do CF-e para cada produto)
            "CÃ³digo Produto", "DescriÃ§Ã£o Produto", "EAN", "NCM", "CEST", "CFOP",
            "Unidade", "Quantidade", "V. UnitÃ¡rio", "V. Total", "Desconto", "Outros",
            "Regra",

            # ðŸ“Œ Impostos por item
            "Valor Tributos Lei 12741", 
            "ICMS Origem", "ICMS CST", "ICMS AlÃ­quota", "ICMS Valor",
            "PIS CST", "PIS Base", "PIS AlÃ­quota", "PIS Valor",
            "COFINS CST", "COFINS Base", "COFINS AlÃ­quota", "COFINS Valor",

            # ðŸ“Œ Totais
            "Total ICMS", "Total Produtos", "Total Desconto", "Total PIS", "Total COFINS",
            "Total CF-e", "Total Tributos Lei 12741",

            # ðŸ“Œ Pagamento
            "Forma Pagamento", "Valor Pago", "Troco",

            # ðŸ“Œ InformaÃ§Ãµes adicionais
            "ObservaÃ§Ãµes do Fisco", "InformaÃ§Ãµes Complementares"
        ]

        linhas = []

        for cfe in cfes:
            ide = cfe.ide
            emit = cfe.emitente
            dest = cfe.destinatario
            totais = cfe.totais
            pagamentos = cfe.pagamentos
            infAdic = cfe.infAdic
            obsFisco = " | ".join([f"{o.get('xCampo', '')}: {o.get('xTexto', '')}" for o in cfe.obsFisco]) if cfe.obsFisco else "-"

            forma_pagamento = " | ".join([p.get('cMP', '-') for p in pagamentos]) if pagamentos else "-"
            valor_pago = " | ".join([p.get('vMP', '-') for p in pagamentos]) if pagamentos else "-"
            troco = "-"
            if hasattr(cfe, "pagamentos") and cfe.pagamentos:
                troco = cfe.totais.get("vTroco", "-") if "vTroco" in cfe.totais else "-"
            if troco == "-" and cfe.pagamentos:
                troco = cfe.pagamentos[0].get("vTroco", "-") if "vTroco" in cfe.pagamentos[0] else "-"

            for item in cfe.itens:
                impostos = item.impostos

                icms_data = self.extrairImposto(impostos, "ICMS")
                pis_data = self.extrairImposto(impostos, "PIS")
                cofins_data = self.extrairImposto(impostos, "COFINS")

                linha = [
                    # CF-e (CabeÃ§alho)
                    cfe.chave, cfe.versao, cfe.versaoDadosEnt, cfe.versaoSB,
                    ide.get("cUF", "-"), ide.get("cNF", "-"), ide.get("mod", "-"),
                    ide.get("nserieSAT", "-"), ide.get("nCFe", "-"),
                    ide.get("dEmi", "-"), ide.get("hEmi", "-"), ide.get("cDV", "-"),
                    ide.get("tpAmb", "-"), ide.get("CNPJ", "-"),
                    ide.get("signAC", "-"), cfe.assinaturaQRCODE, ide.get("numeroCaixa", "-"),

                    # Emitente
                    emit.get("CNPJ", "-"), emit.get("xNome", "-"), emit.get("xFant", "-"),
                    emit.get("enderEmit", {}).get("xLgr", "-"), emit.get("enderEmit", {}).get("nro", "-"),
                    emit.get("enderEmit", {}).get("xCpl", "-"), emit.get("enderEmit", {}).get("xBairro", "-"),
                    emit.get("enderEmit", {}).get("xMun", "-"), emit.get("enderEmit", {}).get("CEP", "-"),
                    emit.get("IE", "-"), emit.get("cRegTrib", "-"), emit.get("indRatISSQN", "-"),

                    # DestinatÃ¡rio
                    dest.get("CPF", dest.get("CNPJ", "-")), dest.get("xNome", "-"),

                    # Produto
                    item.cProd, item.xProd, item.cEAN, item.NCM, item.CEST,
                    item.CFOP, item.uCom, item.qCom, item.vUnCom, item.vProd,
                    item.vDesc, item.vOutro, item.indRegra,

                    # Impostos
                    item.vItem12741,
                    icms_data.get("Orig", "-"), icms_data.get("CST", "-"),
                    icms_data.get("pICMS", "-"), icms_data.get("vICMS", "-"),
                    pis_data.get("CST", "-"), pis_data.get("vBC", "-"),
                    pis_data.get("pPIS", "-"), pis_data.get("vPIS", "-"),
                    cofins_data.get("CST", "-"), cofins_data.get("vBC", "-"),
                    cofins_data.get("pCOFINS", "-"), cofins_data.get("vCOFINS", "-"),

                    # Totais
                    totais.get("ICMSTot", {}).get("vICMS", "-"),
                    totais.get("ICMSTot", {}).get("vProd", "-"),
                    totais.get("ICMSTot", {}).get("vDesc", "-"),
                    totais.get("ICMSTot", {}).get("vPIS", "-"),
                    totais.get("ICMSTot", {}).get("vCOFINS", "-"),
                    totais.get("vCFe", "-"),
                    totais.get("vCFeLei12741", "-"),

                    # Pagamento
                    forma_pagamento, valor_pago, troco,

                    # InformaÃ§Ãµes adicionais
                    obsFisco,
                    infAdic.get("infCpl", "-")
                ]
                linhas.append(linha)

        df = pd.DataFrame(linhas, columns=headers)

        if not caminho_saida.lower().endswith(".xlsx"):
            caminho_saida += ".xlsx"
        os.makedirs(os.path.dirname(caminho_saida), exist_ok=True)
        df.to_excel(caminho_saida, index=False)

        return caminho_saida

    def extrairImposto(self, impostos: dict, tipo: str) -> dict:
        if tipo not in impostos:
            return {}
        bloco = impostos[tipo]
        if isinstance(bloco, dict):
            for chave, dados in bloco.items():
                if isinstance(dados, dict):
                    return dados
        return {}
